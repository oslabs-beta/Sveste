# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Sveste - a no code GUI for writing great unit tests.

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst

Parameters:
  PipelineRole:
    Type: String

Resources:
  FrontendBucket:
    Type: AWS::S3::Bucket

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: FrontendBucket
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
          - Id: Backend
            DomainName: !Sub '${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com'
            OriginPath: '/Prod'
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: FrontendBucket
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: true
        CacheBehaviors:
          - TargetOriginId: Backend
            PathPattern: 'api/*'
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            ViewerProtocolPolicy: https-only
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
            ForwardedValues:
              QueryString: true
        Enabled: true
        DefaultRootObject: index.html

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action:
              - 's3:GetObject'
            Resource: !Sub
              - 'arn:aws:s3:::${Bucket}/*'
              - Bucket: !Ref FrontendBucket
          - Effect: Allow
            Principal:
              AWS:
                - !Ref PipelineRole
            Action:
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource: !Sub
              - 'arn:aws:s3:::${Bucket}/*'
              - Bucket: !Ref FrontendBucket
          - Effect: Allow
            Principal:
              AWS:
                - !Ref PipelineRole
            Action:
              - 's3:ListBucket'
            Resource: !Sub
              - 'arn:aws:s3:::${Bucket}'
              - Bucket: !Ref FrontendBucket

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: CloudFront access identity
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  # This is a Lambda function config associated with the source code: get-all-items.js
  ServerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: server.serverFunction
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A single lambda wrapping an Express server.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref FavoritesTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USERS_TABLE: !Ref UsersTable
          FAVORITES_TABLE: !Ref FavoritesTable
      Events:
        postFavorites:
          Type: Api
          Properties:
            Path: /api/favorites
            Method: POST
        getFavorites:
          Type: Api
          Properties:
            Path: /api/favorites
            Method: GET
        deleteFavorites:
          Type: Api
          Properties:
            Path: /api/favorites
            Method: DELETE
        postSignup:
          Type: Api
          Properties:
            Path: /api/users/signup
            Method: POST
        postLogin:
          Type: Api
          Properties:
            Path: /api/users/login
            Method: POST

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - server.ts
        External:
          - 'aws-sdk'
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  UsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: ID
        Type: String
      TableName: 'UsersTable'

  FavoritesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: ID
        Type: String
      TableName: 'FavoritesTable'

Outputs:
  API:
    Description: 'API Gateway endpoint URL for Sveste prod'
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
  ServerFunction:
    Description: 'ServerFunction'
    Value: !GetAtt ServerFunction.Arn
  ServerFunctionIamRole:
    Description: 'Implicit IAM Role created for ServerFunction'
    Value: !GetAtt ServerFunctionRole.Arn
  Website:
    Value: !GetAtt CloudFrontDistribution.DomainName
